#Copyright (C) 2013 by Ngan Nguyen
#
#Released under the MIT license, see LICENSE.txt

'''Compare models among non-productive vs productive, among 
different samples, different groups etc
Get the median model
'''

import os
import sys
import numbers
import cPickle as pickle
import gzip
import numpy as np

from jobTree.scriptTree.target import Target
from sonLib.bioio import system

import aimseqtk.lib.common as lcommon
import aimseqtk.lib.statcommon as statcommon
import aimseqtk.lib.drawcommon as drawcommon
from aimseqtk.src.recomb.recomb_model import RecombModel
from aimseqtk.lib.common import pretty_float as pfloat


def union_models(models):
    # for each attribute, find the union list of keys and add the
    # missing keys of to each sample (with val = 0)
    if not models:
        return
    for attr in models[0].get_attrs_depth1():
        key_lists = [m[attr].keys() for m in models]
        union_keys = lcommon.union_lists(key_lists)
        for k in union_keys:
            for m in models:
                if k not in m[attr]:
                    m[attr][k] = 0.0
    for attr in models[0].get_attrs_depth2():
        key_lists = [m[attr].keys() for m in models]
        union_keys = lcommon.union_lists(key_lists)
        for k in union_keys:
            for m in models:
                if k not in m[attr]:
                    m[attr][k] = {}
        for k in union_keys:
            key_lists2 = [m[attr][k].keys() for m in models]
            union_keys2 = lcommon.union_lists(key_lists2)
            for k2 in union_keys2:
                for m in models:
                    if k2 not in m[attr][k]:
                        m[attr][k][k2] = 0.0

def model_get_median(models):
    # note: has to do "union_models" before this
    if not models:
        return None
    elif len(models) == 1:
        return models[0]

    med_model = RecombModel()
    for attr in med_model.get_attrs_depth1():
        for k in models[0][attr].keys():
            vec = [m[attr][k] for m in models]
            med_model[attr][k] = np.median(vec)

    for attr in med_model.get_attrs_depth2():
        for k, mydict in models[0][attr].iteritems():
            med_model[attr][k] = {}
            for k2 in mydict.keys():
                vec = [m[attr][k][k2] for m in models]
                med_model[attr][k][k2] = np.median(vec)

    return med_model

def diff_sample_model(in_model, models, attr):
    # compare model generated by each sample with the input "standard"
    # model
    assert attr in in_model.get_attrs_depth1()
    k2diffs = {}
    for k, v in in_model[attr].iteritems():
        k2diffs[k] = [m[attr][k] - v for m in models]
    return k2diffs

def diff_sample_model2(in_model, models, attr):
    # compare model generated by each sample with the input "standard"
    # model
    assert attr in in_model.get_attrs_depth2()
    k_to_k2diffs = {}
    for k, k2v in in_model[attr].iteritems():
        k2diffs = {}
        for k2, v in k2v.iteritems():
            k2diffs[k2] = [m[attr][k][k2] - v for m in models]
        k_to_k2diffs[k] = k2diffs
    return k_to_k2diffs

def diff_plot(x2yvec, outbase, xlabels=[], label='', xmin=None, xmax=None,
              ymin=None, ymax=None, ylabel=''):
    if not x2yvec:
        return
    axes, fig, pdf = drawcommon.get_axes(outfile=outbase)
    if not xlabels:
        xlabels = sorted(x2yvec.keys())
    xdata = range(len(xlabels))
    ydata = [x2yvec[x] for x in xlabels]
    axes.boxplot(ydata)
    drawcommon.set_grid(axes)
    drawcommon.edit_spine(axes)
    # Set limits 
    if xmin:
        if isinstance(xlabels[0], numbers.Number):
            xmin += xdata[0] - xlabels[0] + 1
    else:
        xmin = -0.5
    if xmax:
        if isinstance(xlabels[0], numbers.Number):
            xmax += xdata[0] - xlabels[0] + 1
    else:
        xmax = len(xlabels) + 0.5
    
    if (isinstance(xlabels[0], numbers.Number) or
        isinstance(xlabels[0], tuple)):
        xlabels = [str(x) for x in xlabels]
    xlabels = [x.replace("TRB", "") for x in xlabels]
    drawcommon.set_xticks(axes, [x + 1 for x in xdata], xlabels)
    
    axes.plot([xmin, xmax], [0, 0], ls='-', color='#252525')
    axes.set_xlim(xmin, xmax)

    if ymin and ymax:
        axes.set_ylim(ymin, ymax)
    elif ymin:
        axes.set_ylim(bottom=-0.005)
    
    drawcommon.adjust_ticklabels(axes, xrotation=75)
    if not ylabel:
        ylabel = "Difference in %s" % label
    drawcommon.set_labels(axes, xlabel=label, ylabel=ylabel)
    drawcommon.write_image(fig, pdf, 'pdf', outbase, 300) 
    
def shorten_dj_labels(djs):
    shortdjs = []
    for (d, j) in djs:
        shortd = d.lstrip('TRB')
        shortj = j.lstrip('TRB')
        shortdj = "%s_%s" % (shortd, shortj)
        shortdjs.append(shortdj)
    return sorted(shortdjs)

def model_diff_signi_test(objs1, objs2, outdir, maxeval=0.005):
    if len(objs1) == 0 or len(objs2) == 0:
        return
    obj0 = objs1[0]
    for attr in obj0.get_attrs_depth1():
        outfile = os.path.join(outdir, attr)
        f = open(outfile, 'w')
        f.write("#Key\tstatistic\te_value\tGroup1 +/- Std1\tGroup2 +/- Std2\n")
        for k in obj0[attr]:
            v1 = [obj[attr][k] for obj in objs1]
            v2 = [obj[attr][k] for obj in objs2]
            sval, pval = statcommon.ttest_pair(v1, v2, False, 'ranksums') 
            eval = pval * len(obj0[attr])
            if eval <= maxeval:
                f.write("%s\t%s\t%s\t%s +/- %s\t%s +/- %s\n" % (k,
                           pfloat(sval), pfloat(eval), pfloat(np.mean(v1)),
                           pfloat(np.std(v1)), pfloat(np.mean(v2)),
                           pfloat(np.std(v2))))
        f.close()

def model_diff(indir1, indir2, outdir):
    # indir1 contains sam1_model.pickle, sam2_model.pickle ...
    # indir2: similarly to indir1
    name1 = os.path.basename(indir1.rstrip("/"))
    name2 = os.path.basename(indir2.rstrip("/"))
    objs1 = lcommon.load_pickledir(indir1)
    objs2 = lcommon.load_pickledir(indir2)
    union_models(objs1 + objs2)
    
    # statistic for each attr for differential usage:
    statsdir = os.path.join(outdir, "stat_tests")
    system("mkdir -p %s" % statsdir)
    model_diff_signi_test(objs1, objs2, statsdir)
    #if True:  # HACK
    #    return

    med1 = model_get_median(objs1)
    #med2 = model_get_median(objs2)
    for attr in med1.get_attrs_depth1():
        outbase1 = os.path.join(outdir, "%s_%s_cmp2_%s" % (attr, name2, name1))
        k2diffs1 = diff_sample_model(med1, objs2, attr)
        gene_attrs = ['v', 'd', 'j', 'dj']
        if attr in gene_attrs:
            if attr == 'dj':
                xlabels = sorted(k2diffs1.keys())
            else:
                xlabels = lcommon.sort_by_gene_number(k2diffs1.keys())
            diff_plot(k2diffs1, outbase1, xlabels, attr.upper(), ymin=-0.1,
                                                                 ymax=0.1)
        else:
            diff_plot(k2diffs1, outbase1, label=attr.upper(), xmin=-0.5,
                      xmax=30.5, ymin=-0.02, ymax=0.05)
        #outbase2 = os.path.join(outdir, "%s_%s_cmp2_%s" % (attr, name1, name2))
        #k2diffs2 = diff_sample_model(med2, objs1, attr)
        #diff_plot(k2diffs2, outbase2)
    for attr in med1.get_attrs_depth2():
        k_k2diffs1 = diff_sample_model2(med1, objs2, attr)
        for k, k2diffs1 in k_k2diffs1.iteritems():
            if not isinstance(k, str):
                k = str(k)
            outbase1 = os.path.join(outdir, "%s_%s_%s_cmp2_%s" %
                                            (attr, k, name2, name1))
            if attr in ['v2del', 'j2del', 'd2del']:
                diff_plot(k2diffs1, outbase1, label=attr.upper(), xmin=-0.5,
                          xmax=16.5)
            else:
                diff_plot(k2diffs1, outbase1, label=attr.upper())
        #k_k2diffs2 = diff_sample_model2(med2, objs1, attr)
        #for k, k2diffs2 in k_k2diffs2.iteritems():
        #    if not isinstance(k, str):
        #        k = str(k)
        #    outbase2 = os.path.join(outdir, "%s_%s_%s_cmp2_%s" % (attr, k, name1, name2))
        #    diff_plot(k2diffs2, outbase2)
    
    
def main():
    indir1 = sys.argv[1]
    indir2 = sys.argv[2]
    outdir = sys.argv[3]
    model_diff(indir1, indir2, outdir)

if __name__ == '__main__':
    main()





